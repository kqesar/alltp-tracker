name: CI

on:
  push:
    branches: ["*"]
  pull_request:
    branches: ["*"]
  workflow_call:
    inputs:
      build:
        description: 'Run build step'
        required: false
        type: boolean
        default: false
    outputs:
      test-status:
        description: "Test execution status"
        value: ${{ jobs.ci.outputs.test-status }}
      lint-status:
        description: "Lint execution status"
        value: ${{ jobs.ci.outputs.lint-status }}

permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  ci:
    runs-on: ubuntu-latest
    outputs:
      test-status: ${{ steps.test.outcome }}
      lint-status: ${{ steps.lint.outcome }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '10'

      - name: Install dependencies
        run: pnpm install

      - name: Run linter
        id: lint
        run: pnpm lint

      - name: Run tests
        id: test
        run: pnpm test

      - name: Build project
        id: build
        if: inputs.build == true
        run: pnpm build

      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const lintStatus = '${{ steps.lint.outcome }}' === 'success' ? '‚úÖ' : '‚ùå';
            const testStatus = '${{ steps.test.outcome }}' === 'success' ? '‚úÖ' : '‚ùå';
            
            let buildRow = '';
            if ('${{ inputs.build }}' === 'true') {
              const buildOutcome = '${{ steps.build.outcome }}';
              const buildStatus = buildOutcome === 'success' ? '‚úÖ' : buildOutcome === 'skipped' ? '‚è≠Ô∏è' : '‚ùå';
              buildRow = `| Build | ${buildStatus} |`;
            }

            const hasFailures = lintStatus === '‚ùå' || testStatus === '‚ùå' || 
              ('${{ inputs.build }}' === 'true' && '${{ steps.build.outcome }}' === 'failure');

            const comment = `## üîç CI Results

            | Check | Status |
            |-------|--------|
            | Linting | ${lintStatus} |
            | Tests | ${testStatus} |
            ${buildRow}

            ${hasFailures ? '‚ùå Some checks failed. Please review the logs above.' : '‚úÖ All checks passed!'}

            ---
            *Updated at ${new Date().toISOString()}*`;

            // Find existing CI comment and update it, or create new one
            const { data: comments } = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const existingComment = comments.find(comment => 
              comment.body.includes('üîç CI Results') && 
              comment.user.type === 'Bot'
            );

            if (existingComment) {
              await github.rest.issues.updateComment({
                comment_id: existingComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
