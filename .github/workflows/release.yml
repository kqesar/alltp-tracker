name: Release and Changelog

on:
  push:
    branches:
      - master
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

permissions:
  contents: write
  pull-requests: write

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '10'

      - name: Install dependencies
        run: pnpm install

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Check for changes since last release
        id: check-changes
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$LATEST_TAG" ]; then
            echo "No previous tags found, proceeding with release"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            # Check if there are commits since the last tag
            COMMITS_SINCE_TAG=$(git rev-list ${LATEST_TAG}..HEAD --count)
            if [ "$COMMITS_SINCE_TAG" -gt "0" ]; then
              echo "Found $COMMITS_SINCE_TAG commits since $LATEST_TAG"
              echo "has_changes=true" >> $GITHUB_OUTPUT
            else
              echo "No commits since last tag $LATEST_TAG"
              echo "has_changes=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Run tests
        if: steps.check-changes.outputs.has_changes == 'true'
        run: pnpm test

      - name: Build project
        if: steps.check-changes.outputs.has_changes == 'true'
        run: pnpm build

      - name: Create release branch and PR (automatic)
        if: steps.check-changes.outputs.has_changes == 'true' && github.event_name == 'push'
        id: create-release-auto
        run: |
          # Create a unique branch name with timestamp
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          BRANCH_NAME="release/changelog-$TIMESTAMP"
          
          # Create and switch to release branch
          git checkout -b $BRANCH_NAME
          
          # Run standard-version to update changelog and version
          pnpm release
          
          # Push the release branch
          git push origin $BRANCH_NAME
          
          # Get the new version for PR details
          NEW_VERSION=$(node -p "require('./package.json').version")
          
          # Store branch name and version for next step
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "version=v$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Create release branch and PR (manual)
        if: steps.check-changes.outputs.has_changes == 'true' && github.event_name == 'workflow_dispatch'
        id: create-release-manual
        run: |
          # Create a unique branch name with timestamp
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          BRANCH_NAME="release/changelog-$TIMESTAMP"
          
          # Create and switch to release branch
          git checkout -b $BRANCH_NAME
          
          # Run standard-version with specified release type
          pnpm release --release-as ${{ github.event.inputs.release_type }}
          
          # Push the release branch
          git push origin $BRANCH_NAME
          
          # Get the new version for PR details
          NEW_VERSION=$(node -p "require('./package.json').version")
          
          # Store branch name and version for next step
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "version=v$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Create and auto-merge PR
        if: steps.check-changes.outputs.has_changes == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const branchName = "${{ steps.create-release-auto.outputs.branch_name || steps.create-release-manual.outputs.branch_name }}";
            const version = "${{ steps.create-release-auto.outputs.version || steps.create-release-manual.outputs.version }}";
            const releaseType = "${{ github.event.inputs.release_type || 'patch' }}";
            
            // Read changelog to get recent changes
            const fs = require('fs');
            let changelogContent = '';
            try {
              changelogContent = fs.readFileSync('./CHANGELOG.md', 'utf8');
              // Extract the latest release section (first section after the header)
              const sections = changelogContent.split('\n## ');
              if (sections.length > 1) {
                changelogContent = '## ' + sections[1].split('\n## ')[0];
              }
            } catch (error) {
              console.log('Could not read changelog:', error);
            }
            
            // Create the pull request
            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚀 Release ${version}`,
              head: branchName,
              base: 'master',
              body: `## 📋 Release ${version}
              
              This PR contains the automated release for version ${version}.
              
              ### 📝 Changes in this release:
              ${changelogContent}
              
              ### 🔧 What's included:
              - ✅ **Version bump**: Updated to ${version}
              - ✅ **Changelog**: Auto-generated from conventional commits
              - ✅ **Git tag**: Will be created after merge
              
              ### 🤖 Automation:
              - **Release type**: ${releaseType}
              - **Triggered by**: ${context.eventName === 'workflow_dispatch' ? 'Manual workflow dispatch' : 'Push to master'}
              - **Created at**: ${new Date().toISOString()}
              
              This PR will be automatically merged and a GitHub release will be created.
              
              ---
              *Automated release PR created by GitHub Actions*`,
              draft: false
            });
            
            console.log(`Created PR #${pr.number}: ${pr.html_url}`);
            
            // Wait a moment for PR to be fully created
            await new Promise(resolve => setTimeout(resolve, 2000));
            
            // Enable auto-merge
            try {
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number,
                commit_title: `🚀 Release ${version}`,
                commit_message: `Automated release for ${version}\n\nAuto-merged from PR #${pr.number}`,
                merge_method: 'squash'
              });
              
              console.log(`Successfully merged PR #${pr.number}`);
              
              // Now create and push the git tag
              const { data: commit } = await github.rest.repos.getCommit({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: 'master'
              });
              
              await github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `refs/tags/${version}`,
                sha: commit.sha
              });
              
              console.log(`Created tag ${version}`);
              
            } catch (error) {
              console.error('Error during merge or tag creation:', error);
              throw error;
            }

      - name: Create GitHub Release
        if: steps.check-changes.outputs.has_changes == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.create-release-auto.outputs.version || steps.create-release-manual.outputs.version }}
          release_name: Release ${{ steps.create-release-auto.outputs.version || steps.create-release-manual.outputs.version }}
          body_path: ./CHANGELOG.md
          draft: false
          prerelease: false

      - name: Upload build artifacts
        if: steps.check-changes.outputs.has_changes == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ steps.create-release-auto.outputs.version || steps.create-release-manual.outputs.version }}
          path: dist/
