#!/usr/bin/env node

/**
 * Coverage Display Script for ALLTP Tracker
 *
 * This script reads the coverage-summary.json file generated by vitest
 * and displays a formatted table with coverage metrics in the terminal.
 *
 * Usage:
 *   node scripts/show-coverage.js
 *   pnpm coverage
 *   pnpm test:coverage:show
 *
 * Requirements:
 *   - coverage/coverage-summary.json must exist (run tests with coverage first)
 */

import { existsSync, readFileSync } from "fs";
import { dirname, join } from "path";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const projectRoot = join(__dirname, "..");
const coveragePath = join(projectRoot, "coverage", "coverage-summary.json");

function getStatusEmoji(pct) {
  if (pct >= 90) return "🟢";
  if (pct >= 80) return "🟡";
  if (pct >= 70) return "🟠";
  return "🔴";
}

function getStatusText(pct) {
  if (pct >= 90) return "Excellent";
  if (pct >= 80) return "Good";
  if (pct >= 70) return "Fair";
  return "Needs Improvement";
}

function formatTable(data) {
  // Calculate column widths
  const widths = [0, 0, 0, 0];
  data.forEach((row) => {
    row.forEach((cell, i) => {
      widths[i] = Math.max(widths[i], cell.length);
    });
  });

  // Create header and separator
  const header = data[0].map((cell, i) => cell.padEnd(widths[i])).join(" | ");
  const separator = widths.map((w) => "-".repeat(w)).join("-|-");

  // Create data rows
  const rows = data
    .slice(1)
    .map((row) => row.map((cell, i) => cell.padEnd(widths[i])).join(" | "));

  return [header, separator, ...rows].join("\n");
}

function main() {
  console.log("\n📊 Test Coverage Report\n");

  if (!existsSync(coveragePath)) {
    console.log(
      '❌ Coverage file not found. Run "pnpm test:coverage" first.\n',
    );
    process.exit(1);
  }

  try {
    const coverage = JSON.parse(readFileSync(coveragePath, "utf8"));
    const { lines, statements, functions, branches } = coverage.total;

    const tableData = [
      ["Metric", "Coverage", "Status", "Quality"],
      [
        "Lines",
        `${lines.covered}/${lines.total} (${lines.pct}%)`,
        getStatusEmoji(lines.pct),
        getStatusText(lines.pct),
      ],
      [
        "Statements",
        `${statements.covered}/${statements.total} (${statements.pct}%)`,
        getStatusEmoji(statements.pct),
        getStatusText(statements.pct),
      ],
      [
        "Functions",
        `${functions.covered}/${functions.total} (${functions.pct}%)`,
        getStatusEmoji(functions.pct),
        getStatusText(functions.pct),
      ],
      [
        "Branches",
        `${branches.covered}/${branches.total} (${branches.pct}%)`,
        getStatusEmoji(branches.pct),
        getStatusText(branches.pct),
      ],
    ];

    console.log(formatTable(tableData));

    // Overall status
    const overallPct =
      (lines.pct + statements.pct + functions.pct + branches.pct) / 4;
    console.log(
      `\n📈 Overall Coverage: ${overallPct.toFixed(2)}% ${getStatusEmoji(overallPct)}\n`,
    );

    // Coverage thresholds info
    console.log("Coverage Quality Thresholds:");
    console.log(
      "🟢 Excellent: ≥90%  🟡 Good: ≥80%  🟠 Fair: ≥70%  🔴 Needs Improvement: <70%\n",
    );
  } catch (error) {
    console.log("❌ Error reading coverage data:", error.message);
    process.exit(1);
  }
}

main();
